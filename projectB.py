# -*- coding: utf-8 -*-
codons = {"UUU":"Phe", "UUC":"Phe", "UUA":"Leu", "UUG":"Leu",
          "UCU":"Ser", "UCC":"Ser", "UCA":"Ser", "UCG":"Ser",
          "UAU":"Tyr", "UAC":"Tyr", "UAA":"STOP", "UAG":"STOP",
          "UGU":"Cys", "UGC":"Cys", "UGA":"STOP", "UGG":"Trp",
          "CUU":"Leu", "CUC":"Leu", "CUA":"Leu", "CUG":"Leu",
          "CCU":"Pro", "CCC":"Pro", "CCA":"Pro", "CCG":"Pro",
          "CAU":"His", "CAC":"His", "CAA":"Gln", "CAG":"Gln",
          "CGU":"Arg", "CGC":"Arg", "CGA":"Arg", "CGG":"Arg",
          "AUU":"Ile", "AUC":"Ile", "AUA":"Ile", "AUG":"Met",
          "ACU":"Thr", "ACC":"Thr", "ACA":"Thr", "ACG":"Thr",
          "AAU":"Asn", "AAC":"Asn", "AAA":"Lys", "AAG":"Lys",
          "AGU":"Ser", "AGC":"Ser", "AGA":"Arg", "AGG":"Arg",
          "GUU":"Val", "GUC":"Val", "GUA":"Val", "GUG":"Val",
          "GCU":"Ala", "GCC":"Ala", "GCA":"Ala", "GCG":"Ala",
          "GAU":"Asp", "GAC":"Asp", "GAA":"Glu", "GAG":"Glu",
          "GGU":"Gly", "GGC":"Gly", "GGA":"Gly", "GGG":"Gly"}
        
def main():
    """
    Reads files and assigns them to reference, dna1, dna2, and dna3 strings. 
    Prints whether dna 1, 2, and 3 are synonymous with the reference sequence and the number of mutations each.

    Parameters
    ----------
    ref: String 
    dna: String
    Returns
    -------
    None.

    """
     
    ref = readFile('ref.txt')
    dna = [readFile('dna1.txt'), readFile('dna2.txt'), readFile('dna3.txt')]

    for i in range(0,3):
        if synonymous(dna[i], ref):
            print(f'Subject {i+1} DNA has {count(dna[i], ref)} mutations and is synonymous')
        else:
            print(f'Subject {i+1} DNA has {count(dna[i], ref)} mutations and is not synonymous')
    
import os

def readFile(fileName):
    script_dir = os.path.dirname(__file__)
    file_path = os.path.join(script_dir, fileName)
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"File not found: {file_path}")
    with open(file_path, 'r') as dnaFile:
        return "".join(dnaFile.readlines()).strip()
    
    
def writeFile(fileName,text):
    """
    Writes a text file.

    Parameters
    ----------
    fileName : str
        File path to write.
    text : str
        Text to write.

    Returns
    -------
    None.

    """
    with open(fileName,'w') as textFile:
        textFile.write(text)

def transcribe(dna):
    """
    Transcribes DNA to the corresponding RNA sequence.
    Keeps all bases the same except changing T to U.

    Parameters
    ----------
    dna : string
        String representing a DNA sequence.

    Returns
    -------
    mrna : string
        String representing the corresponding sequence of RNA.

    """ 
    dna_to_mrna = ""
    for element in dna:
        if element == 'A' or element == 'G' or element == 'C':
            dna_to_mrna = dna_to_mrna + element
        elif element == 'T':
            dna_to_mrna = dna_to_mrna + 'U'
    return dna_to_mrna
    
def translate(mrna):
    """
    Translates RNA to amino acids using the given codon dictionary. 

    Parameters
    ----------
    mrna : string
        String representing an RNA sequence

    Returns
    -------
    translated : string
        String representing an amino acid sequence.

    """
    translated = ""
    i = 0
    for i in range(0, len(mrna), 3):
        three_bases = mrna[i:i+3]
        if three_bases in codons:
            translated = translated + " " + codons[three_bases]

    return translated

def synonymous(sub, ref):
    """
    Compares the amino acid sequences generated by the subject DNA and the reference DNA sequences to return if they are the same or not

    Parameters
    ----------
    sub : string
        Subject's DNA sequence to be compared.
    ref : string
        Reference DNA sequence.

    Returns
    -------
    bool
        Whether the amino acid sequences produced by subject DNA are the same as the reference DNA

    """
    if translate(transcribe(sub)) == translate(transcribe(ref)):
        return True
    else:
        return False
    
def delete(dna, i):
    """
    Deletes the base at index i in a DNA sequence string

    Parameters
    ----------
    dna : string
        String representing a DNA sequence
    i : int
        Index of base to be deleted 

    Returns
    -------
    string
        String with base at i deleted

    """
    return dna[0:i] + dna[i+1:]


def insert(dna, i, base):
    """
    Inserts the base at index i in a DNA sequence string

    Parameters
    ----------
    dna : string
        String representing a DNA sequence
    i : int
        Index of base to be inserted 
    base: string
        base to be inserted

    Returns
    -------
    string
        String with base at i inserted

    """
    return dna[0:i] + base + dna[i:] 


def substitute(dna, i, base):
    """
    substitutes the base at index i in a DNA sequence string

    Parameters
    ----------
    dna : string
        String representing a DNA sequence
    i : int
        Index of base to be inserted 
    base: string
        base to be substituted into the DNA sequence

    Returns
    -------
    string
        String with base at i substituted

    """
    return dna[:i] + base + dna[i+1:] 

def diff(sub, ref):
    """
    Returns index of the first difference between subject DNA and the reference DNA
    
    Parameters
    ----------
    sub : string
        Subject DNA
    ref : string
        Rreference dna

    Returns
    -------
    best_diff: int
        Index of first difference between the subject DNA and the reference DNA

    """
    if sub == ref:
        return -1
    
    if len(sub) != len(ref):
        if len(sub) < len(ref):
            best_diff = len(sub)
        elif len(ref) < len(sub):
            best_diff = len(ref)
    elif len(ref) == len(sub) and sub != ref:
        best_diff = len(sub) 
    
    for i in range(best_diff):
        if sub[i] != ref[i]:
            return i
    return best_diff

def repair(sub, ref):
    """
    repairs the first difference between subject dna and reference dna by inserting or deleting or subsituting depending on which is the most effective.
    Parameters
    ----------
    sub : string
        subject dna
    ref : string
        reference dna

    Returns
    -------
    string
        The repaired subject dna with the mutation corrected

    """
    i = diff(sub, ref)

    

    sub_val = substitute(sub, i, ref[i])
    sub_diff = diff(sub_val, ref)
    del_val = delete(sub, i)
    del_diff = diff(del_val, ref)
    ins_val = insert(sub, i, ref[i])
    ins_diff = diff(ins_val, ref)

    if i == -1:
        return sub
    elif sub_diff == -1:
        return sub_val
    elif del_diff == -1:
        return del_val
    elif ins_diff == -1:
        return ins_val

    if sub_diff > del_diff and sub_diff > ins_diff:
        return sub_val
    elif del_diff > sub_diff and del_diff > ins_diff:
        return del_val
    else:
        return ins_val 

    
def count(sub, ref):
    """
    counts the number of times repair function must be called in order to completely correct subject dna to rerference

    Parameters
    ----------
    sub : string
        subject dna
    ref : string
        reference dna
        

    Returns
    -------
    count : int
        counts the number of mutations representing the number of times repair has to be called

    """
    if diff(sub, ref) == -1:
        return 0
    count = 0
    while sub != ref:
        new_sub = repair(sub, ref)
        count += 1
        sub = new_sub
    
    return count


if __name__ == "__main__": main()
